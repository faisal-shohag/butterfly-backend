generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String    @unique
  password   String
  photoURL   String    @default("https://i.postimg.cc/5tqhtjwH/image.png")
  userId     String?
  coverPhoto String    @default("https://i.postimg.cc/05wQx63s/image.png")
  books      Book[]
  comments   Comment[]
  likes      Like[]
  posts      Post[]
  replies    Reply[]
}

model Book {
  id            Int               @id @default(autoincrement())
  title         String
  isbn          String?
  publishedYear String?
  publisher     String?
  description   String?
  cover         String?
  genre         String
  userId        Int
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  samplePhotos  BookSamplePhoto[]
}

model LookingFor {
  id          Int     @id @default(autoincrement())
  title       String
  cover       String?
  description String?
  price       Float
}

model BookSamplePhoto {
  id     Int    @id @default(autoincrement())
  url    String
  bookId Int
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([bookId])
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String
  authorId  Int
  type      String?
  comments  Comment[]
  images    Image[]   @relation("PostImages")
  likes     Like[]
  author    User      @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  images    Image[]  @relation("CommentImages")
  likes     Like[]
  replies   Reply[]

  @@index([authorId])
  @@index([postId])
}

model Reply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  authorId  Int
  commentId Int
  likes     Like[]
  author    User     @relation(fields: [authorId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])

  @@index([authorId])
  @@index([commentId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  postId    Int?
  commentId Int?
  replyId   Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  reply     Reply?   @relation(fields: [replyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId, commentId, replyId])
  @@index([userId])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  fileId    String?
  postId    Int?
  commentId Int?
  comment   Comment? @relation("CommentImages", fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation("PostImages", fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([commentId])
}
