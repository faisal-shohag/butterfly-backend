// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User {
  id        String  @id @default(uuid())
  full_name String
  email       String      @unique
  password    String?      
  avatar_url    String      @default("https://i.postimg.cc/5tqhtjwH/image.png")
  coverPhoto  String      @default("https://i.postimg.cc/05wQx63s/image.png")
  posts       Post[]
  comments    Comment[]
  replies     Reply[]
  likes       Like[] 
  books       Book[]
}

model Book {
  id              Int               @id @default(autoincrement())
  title           String
  author          String
  isbn            String?
  publishedYear   String?
  publisher       String?
  description     String?
  cover           String?
  genre           String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String             // `userId` should reference the `User`'s id, and it should be `Int` to match the `User` model's `id`
  samplePhotos    BookSamplePhoto[]
  lookingFor      Json //title, author, cover, genre, description, 
}

model BookSamplePhoto {
  id        Int      @id @default(autoincrement())
  url       String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    Int

  @@index([bookId])
}


model Post{
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  content     String
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  likes       Like[]
  images      Image[]     @relation("PostImages")
  type        String?

  @@index([authorId])
}


model Comment {
  id          Int           @id @default(autoincrement())
  content     String        
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String
  post        Post          @relation(fields : [postId], references: [id])
  postId      Int
  replies     Reply[]
  likes       Like[]
  images      Image[]       @relation("CommentImages")


  @@index([authorId])
  @@index([postId])
}

model Reply {
  id          Int             @id  @default(autoincrement())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  content     String
  author      User            @relation(fields : [authorId], references: [id])
  authorId    String
  comment     Comment       @relation(fields: [commentId], references: [id])
  commentId   Int
  likes       Like[]

  @@index([authorId])
  @@index([commentId])
}

model Like {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields : [userId], references: [id])
  userId      String
  post        Post?           @relation(fields: [postId], references: [id])
  postId      Int?
  comment     Comment?        @relation(fields: [commentId], references: [id])
  commentId   Int?
  reply       Reply?          @relation(fields: [replyId], references: [id])
  replyId     Int?

  @@unique([userId, postId, commentId, replyId])
  @@index([userId])
}


model Image {
  id        Int      @id @default(autoincrement())
  url       String
  fileId    String?
  post      Post?    @relation("PostImages", fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  comment   Comment? @relation("CommentImages", fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?

  @@index([postId])
  @@index([commentId])
}
