generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  username    String? @unique
  emailVerified DateTime?
  email      String    @unique
  password   String?
  image  String?
  coverPhoto String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role String?
   accounts      Account[]
  sessions      Session[]
  books      Book[]
  comments   Comment[]
  likes      Like[]
  bookLikes  BookLike[]
  posts      Post[]
  replies    Reply[]
  followers     Follows[] @relation("followers")
  following     Follows[] @relation("following")
  coins Coin[]
  requests Request[]
  reviews BookReview[]

  @@map("users")
}

model Coin {
  id         String    @id @default(uuid())
  type String?
  reason String?
  value Float @default(0)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@map("coins")
}

model Follows {
  follower    User     @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
  @@map("follows")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([provider, providerAccountId])
  @@map("accounts")
}


model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Book {
  id            Int               @id @default(autoincrement())
  title         String
  isbn          String?
  publishedYear String?
  publisher     String?
  description   String?
  cover         String?
  genre         String
  userId        String
  lookingFor    Json
  author        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  samplePhotos  BookSamplePhoto[]
  likes         BookLike[]
  requests      Request[]          
  createdAt     DateTime @default(now())
  reports  Report[]
  @@index([userId])
}

model BookLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@index([userId])
  @@index([bookId])
}

model BookSamplePhoto {
  id     Int    @id @default(autoincrement())
  url    String
  bookId Int
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([bookId])
}


model StoreBook{
  id     Int    @id @default(autoincrement())
  title String
  description String
  author String
  publications String?
  publishedDate DateTime?
  price Float @default(0)
  coin  Int @default(0)
  discount Float @default(0)
  category String
  language String
  cover String?
  reviews BookReview[]
  @@map("storebook")
}

model BookReview {
  id     Int    @id @default(autoincrement())
  book  StoreBook @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId Int
  createdAt DateTime @default(now())
  rating Float
  review String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}


model Request {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  requesterId String
  bookId     Int
  message    String?  // Optional request message
  status     String    // Request status (e.g., pending, approved, rejected)
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  requester  User     @relation(fields: [requesterId], references: [id], onDelete: Cascade)

  @@index([requesterId])
  @@index([bookId])
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String
  authorId  String
  type      String?
  comments  Comment[]
  images    Image[]   @relation("PostImages")
  likes     Like[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reports  Report[]

  @@index([authorId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String   
  postId    Int?
  commentId Int?
  replyId   Int?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId, replyId])
  @@index([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  images    Image[]  @relation("CommentImages")
  likes     Like[]
  replies   Reply[]

  @@index([authorId])
  @@index([postId])
}

model Reply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt @default(now())
  content   String
  authorId  String
  commentId Int
  likes     Like[]
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([commentId])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  fileId    String? 
  postId    Int?
  commentId Int?
  comment   Comment? @relation("CommentImages", fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation("PostImages", fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([commentId])
}


model Report {
  id        Int      @id @default(autoincrement())
  text  String
  createdAt DateTime @default(now())
  post  Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?
  book Book? @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId Int?
  replies ReportReplies[]
}

model ReportReplies {
  id        Int      @id @default(autoincrement())
  text  String
  createdAt DateTime @default(now())
  report  Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}